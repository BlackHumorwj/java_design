

 一、设计模式分类

    1、 创建型模式（5种）

        工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式

    2、 结构型模式（7种）

        适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式

    3、 行为型模式（11种）

        策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解析器模式


二、设计模式的六大原则

    总原则

        开闭原则：对修改关闭，对扩展开放。更好的扩展程序，实现插拔的的效果，因此设计的时候多考虑接口和抽象类。避免修改原有的逻辑

    1、单一职责原则

        每个类应该实现单一的职责，如若不然，就应该把类拆分

    2、里氏替换原则

        任何基类可以出现的地方子类一定可以出现。java中多态特性。里氏替换原则是对"开闭原则"的补充

    3、依赖倒转原则

        面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类是，不与具体类交互，而与具体类上层接口交互

    4、接口隔离原则

        每个接口中不存在子类用不到却必须实现的方法，如若不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好

    5、迪米特原则（最少知道原则）

       一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。

    6、合成复用原则

        原则是尽量首先使用合成/聚合的方式，而不是使用继承


三、解析

    1、工厂模式

        1.1 工厂模式  同一个产品的不同类型，产品种类单一

        1.2 抽象工厂模式  多个产品，多种类型

