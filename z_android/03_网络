
1、request url格式
    scheme://host[:port]/path[?query]

    scheme协议，常用的协议是http、https
    host 主机地址，可以是域名，也可以是IP地址
    port 端口 http协议默认端口是：80端口，如果不写默认就是:80端口,https默认端口443端口
    path 路径 网络资源在服务器中的指定路径
    query 查询字符串 如果需要从服务器那里查询内容

2、http 网络应用层协议
	
	2.1 http报文
		格式： 起始行
			  首部
			  主体
		
		
		请求报文
			<method> <request-url> <version>
			<headers>

			<entity-body>
			
		响应报文
			<version> <status> <reason-phrase>
			<headers>

			<entity-body>
		
		报文解释：
			
			<method> 
			        指请求方法，常用的主要是Get、 Post、Head 等
					 * get和post区别
			
			<version> 
			        指协议版本，现在通常都是Http/1.1了
			
			<request-url> 请求地址
			
			<status> 
					指响应状态码， 我们熟悉的200、404等等
						常见的状态码主要有  
							200 OK  请求成功，实体包含请求的资源  
							301 Moved Permanent 请求的URL被移除了，通常会在Location首部中包含新的URL用于重定向。  
							304 Not Modified    条件请求进行再验证，资源未改变。  
							404 Not Found       资源不存在  
							206 Partial Content 成功执行一个部分请求。这个在用于断点续传时会涉及到。
			
			<reason-phrase> 
		
					原因短语，200 OK 、404 Not Found 这种后面的描述就是原因短语，通常不必太关注。
			
			<headers>
				和缓存相关的头部信息
					Date  
					Cache-Control  
					Last-Modified  
					Etag  
					Expires  
					If-Modified-Since   
					If-None-Match  
					If-Unmodified-Since  
					If-Range  
					If-Match

			<entity-body>
				请求发送的资源，或是响应返回的资源。
				
	2.2 Http缓存
	
		2.2.1 几个概念
			1、新鲜度校验
				缓存资源超过一定的时间，需要判断资源是否新鲜。这个一定的时间，是由响应报文中增加Cache-Control:max-age，或是Expire这两个首部来实现的
				
				Cache-Control是http1.1的协议规范，通常是接相对的时间，即多少秒以后，需要结合last-modified这个首部计算出绝对时间；
				Expire是http1.0的规范，后面接一个绝对时间。
			
			2、在验证
				
				如果通过新鲜度检测发现需要请求服务器进行再验证。
				条件请求 的方式实现再验证：
					Http定义了5个首部用于条件请求:  
						If-Modified-Since   
						If-None-Match  
						If-Unmodified-Since  
						If-Range  
						If-Match
			
			3、在验证命中
		
		
		2.2.2 OkHttp的缓存
			
			1、CacheInterceptor 拦截器
			
			2、忽略缓存的几种情况：
				
				a.缓存本身不存在

				b.请求是采用https 并且缓存没有进行握手的数据。

				c.缓存本身不应该不保存下来。可能是缓存本身实现有问题，把一些不应该缓存的数据保留了下来。

				d.如果请求本身添加了 Cache-Control: No-Cache，或是一些条件请求首部，说明请求不希望使用缓存数据。
			
			3、缓存流程
				
				从接收到的请求中，解析出Url和各个首部。

				查询本地是否有缓存副本可以使用。

				如果有缓存，则进行新鲜度检测，如果缓存足够新鲜，则使用缓存作为响应返回，如果不够新鲜了，则构造条件请求，发往服务器再验证。如果没有缓存，就直接将请求发往服务器。

				把从服务器返回的响应，更新或是新增到缓存中。
				
	2.3 OAuth			
				
		OAuth是一个用于授权第三方获取相应资源的协议		
				
				
		一个OAuth授权的流程主要可以分为6步：

			1、客户端向用户申请授权。

			2、用户同意授权。

			3、客户端通过获取的授权，向认证服务器申请Access Token。

			4、认证服务器通过授权认证后，下发Access Token。

			5、客户端通过获取的到Access Token向资源服务器发起请求。

			6、资源服务器核对Access Token后下发请求资源。		
				
	2.4 https
	
		1.Http + 加密 + 认证 + 完整性保护 = Https
		
		2.Https可以通过增加的SSL\TLS，支持对于通信内容的加密，以及对通信双方的身份进行验证。
	
		3.http缺点
			
			1.Http协议使用明文传输，容易遭到窃听。
			
			2.Http对于通信双方都没有进行身份验证，通信的双方无法确认对方是否是伪装的客户端或者服务端
				
			3.Http对于传输内容的完整性没有确认的办法，往往容易在传输过程中被劫持篡改。	
				
		4.加密方式
			
			对称加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA
				
				加密和解密使用同一把秘钥，速度快。使用中问题，如何安全的将秘钥从一方传递到通信的另一方
			
			非对称加密，常见的非对称加密算法有RSA、Elgamal、Rabin、D-H、ECC（椭圆曲线加密算法）等
				
				加密和解密使用两把不同的秘钥，分别是公钥和私钥。公钥对数据进行加密，只能使用私钥进行解密。缺点：相对于对称加密，处理速度慢。
				
		5.SSL\TLS的加密方式
			
			首先采用非对称秘钥加密，将一个对称秘钥使用公开秘钥加密后传输到对方。
			对方使用私有秘钥解密，得到传输的对称秘钥。之后双方再使用对称秘钥进行通信。
			这样即解决了对称秘钥加密的秘钥传输问题，又利用了对称秘钥的高效率来进行通信内容的加密与解密。
				
				
		6.https认证
			
			SSL\TLS加密存在的一个问题，如何确保服务端给的公钥是没有被篡改的，因此我们需要对这个公钥进行验证。
			如何验证：
				目前的做法是使用由数字证书认证机构颁发的公开秘钥证书。服务器的运营人员可以向认证机构提出公开秘钥申请。
				认证机构在审核之后，会将公开秘钥与共钥证书绑定。
				服务器就可以将这个共钥证书下发给客户端，客户端在收到证书后，
				使用认证机构的公开秘钥进行验证。一旦验证成功，即可知道这个秘钥是可以信任的秘钥。
				
		7.Https的通信流程：

			Client发起请求

			Server端响应请求，将证书发送至Client

			Client使用 认证机构的共钥  认证 证书，并从证书中取出Server端公钥。

			Client使用公钥加密一个随机秘钥，并传到Server

			Server使用私钥解密出 随机秘钥 ；

			通信双方使用随机秘钥对数据进行加密解密。		
				
				

参考： https://mp.weixin.qq.com/s/Fazx13maQfPJItfkOqk9FQ
				
				
				
				
				